1. tcp的状态：
    在tcp层，有一个flags字段，这个字段有以下几个标识:SYN、FIN、ACK、PSH、RST、URG
    (1)它们的含义是:
        SYN表示建立连接，
        FIN表示关闭连接，
        ACK表示响应，
        PSH表示有 DATA数据传输，
        RST表示连接重置。 
    


Client:[SYN]     Seq=0:           26 ff 1b c8 
   -- 客户端请求建立连接
Server:[SYN+ACK] Seq=0,ack=1 :   Ack:   26 ff 1b c9    Seq:  1b ee 8c ba 
   -- 服务端发送收到连接建立，同时发送确认联机信息(标识位、)
Client:[ACK]     Seq=1,ack=1 :   Seq:   26 ff 1b c9    Ack:  1b ee 8c bb  
   -- 客户端收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1
      若正确，客户端会再发送ack number=(服务端的seq+1)，ack=1，服务端收到后确认seq值与ack=1则连接建立成功。

send message:
Client:[PSH,ACK] Seq: 26 ff 1b c9   Ack:   1b ee 8c bb
Server:[ACK]     Seq: 1b ee 8c bb   Ack:   26 ff 1b cb    


2.tcp窗口滑动：
    1:"窗口":对应的是一段可以被发送者发送的字节序列,其连续的范围称之为"窗口"
    2."滑动":是指"允许发送的范围"是可以随着发送的过程而变化的，方式就是按顺序"滑动"
    
        发送窗口：
            已发送并收到确认的数据:不再发送窗口和发送缓存区之内
            已发送但未收到确认的数据:位于发送窗口中
            允许发送但尚未发送的数据、发送窗口外发送缓存区内暂时不允许发送的数据
        发送缓冲区: 发送缓存区 的范围 大于 发送窗口 
            发送窗口是发送缓冲区中的一部分，是可以被TCP协议发送的数据,其实应用层需要发送的所有数据都被放进了发送者的发送缓冲区。
    
    3.每次成功发送数据后，发送窗口就会在发送缓冲区中按顺序移动，将新的数据包含到窗口中准备发送。
        (1)tcp建立连接时，B会告诉A自己的接收 窗口大小，比如"20"
        (2)A根据B给出的窗口值，构造自己的发送窗口
        (3)A发送11个字节后，发送窗口的位置不变，B接收到了乱序的数据分组
        (4)
        
3. 拥塞控制：
     拥塞原因：
        数据首先会缓存到交换机、路由器上，由于路由器、交换机缓存区大小有限，超出缓存范围的数据会被交换机、路由器丢弃
        
    拥塞控制:
        四种算法：
            慢启动：
                (1)一开始发送数据时，如果把大量数据注入到网络，可能引起网络拥塞，因为一开始不知道网络的状况。
                (2)因此慢启动算法先探测一下，发送大小为cwnd=1d的报文(cwnd:拥塞窗口的大小)，当收到对报文的确认后，在cwnd+=1,再次收到确认 后，再加。为了防止 cwnd 增长的过大，TCP 中还维护了另一个变量 ssthresh，它称之为慢启动门限，这是一个阈值，当 cwnd 超过这个值的时候，慢启动算法结束，进入拥塞避免算法
                
            拥塞避免
                无论是在慢启动阶段，还是在拥塞避免阶段，只要发送方判断网络出现拥塞（依据就是没有按照收到确认），就要把 ssthresh 设置为出现拥塞时的 cwnd 值的一半（注意这只是一种策略，实际实现中不一定是这样的，RFC 中给出的公式是将已发出但是还未被确认的数据字节数来设置 ssthresh 的值）。

                在更新了 ssthresh 后，同时将 cwnd 重新设置为 1，又开始执行慢启动算法。这样做的目的是要迅速减少主机发送到网络中的分组数，使得发生拥塞的中间设备有足够的时间把缓冲区中积压的分组处理完毕。
            快重传
            快恢复
https://blog.csdn.net/q1007729991/article/category/6837374/5        
            
    