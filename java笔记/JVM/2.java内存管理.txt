1.hotspot JVM: 是现在生产环境使用的典型JVM。

2.java中的 内存你泄露:
    (1)如果不再使用的对象存在有效(但不再使用)的引用,任然会发生内存泄露
        * 例如，如果某个方法运行时间很长(或者一直运行下去)，那么这个方法中的局部变量就会一直保存对象的引用
        * hashMap中仍然存在两个对象之间的关联，因此在回收哈希表之前，这个两个对象会一直存在
        
3.标记清除算法：
        整个过程分三步:
            * 迭代分配表，把每个对象都标记为"已死亡"
            * 从指向堆的局部变量开始，顺着遇到的每个对象的全部引用向下,每遇到一个之前
              没有见到过的对象或数组，就把它标记为"存活",像这样一直向下，直到找出能从局部变量到达的所有引用为止。
            * 再次迭代分配表,回收所有没标记为"存活"的对象在堆中占用的内存,然后把这些内存放回可用内存列表中，最后把这些对象从分配表中删除。  