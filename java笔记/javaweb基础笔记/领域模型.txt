领域模型中实体类分为四种类型:
    VO(view object):视图对象,用于展示层,它的作用是把某个指定页面(或组件)的所有数据封装起来
    DTO(data transfer object):数据传输对象，这个概念来源与j2ee的设计模式，原来的目的是为了ejb的分布式应用提供粗粒度的数据实体，以减少分布式调用次数，从而提供分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象
    DO(Domain Object):领域对象,就是从现实世界中抽象出来得到有形或无形的业务实体
    PO(Persistent Object):持久化对象，它跟持久层(通常是关系型数据库)的数据结构形成--对应的映射关系，如果持久层是关系型数据库，那么，数据表的每个字段(或若干个)就对应PO得到一个(或若干个)属性。


流程:    
    1.用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。
    2.展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。
    3.服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。
    4.服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。

    * 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。


项目中实体类:
    1.项目中常见的实体类有VO,DO和DTO,命名规则也有常是以相应字符串结尾，如*VO.java
    2.但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成*Query.java，表示存储了一个查询条件。项目中实体类出现的
    3.业务层次也没有这么严格，例如我们可以在视图层就组装一个DO，也可以将一个VO从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。
    4.从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据
