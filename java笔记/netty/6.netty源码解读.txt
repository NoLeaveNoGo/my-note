1.背后的事件驱动机制:
    (1)所有的事件都来自于ChannelEvent接口，这个接口涵盖了监听端口，建立连接，读写数据等网络通讯的各个阶段
    (2)事件的处理者就是ChannelHandler，这样，不仅业务逻辑，连网络通讯流程中底层的处理，都可以通过ChannelHandler来完成
    (3)Netty内部的连接处理、协议编解码、超时等机制，都是通过handler完成
  流程：
    Channel (连接的通道，是ChannelEvent的产生者) -> 生成事件ChannelEvent -> ChannelPipeline(ChannelHandler的链，将事件依次传递给多个ChannelHandler进行处理)

2.Netty中的各个模块：
    org
      --jboss
        netty
          |-----  boostrap 配置并启动服务的类
          |-----  buffer 缓冲相关的类，对nio buffer做了一些封装
          |-----  channel 核心部分，处理连接
          |-----  container 连接其他容器的代码
          |-----  example 使用示例
          |-----  handler 基于handler的扩展部分
          |-----  logging 日志
          |-----  util    工具类
 
3.Buffer:
    (1)tcp/ip协议与buffer
        tcp/ip传输数据时，会有拆包或黏包的现象
    (2)netty中的解决办法：ChannelBuffer
        一般的buffer工作在传输层，会有拆包和黏包现象
        netty中封装一个虚拟的Virtual Buffer，会将接收到的Buffer进行组合成ChannelBuffer
 
4.Channel中的Pipeline
    (1)Channel是通讯的载体，而ChannelHandler负责Channel中的逻辑处理
    (2)
        
    
    
    