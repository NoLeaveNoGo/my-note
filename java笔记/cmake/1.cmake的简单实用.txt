1. cmake的使用过程
	(1)需要编写CMakeLists.txt 
		* 这个是cmake的构建定义文件，文件名是大小写相关的，如果过程存在多个目录，需要确保每个要管理的目录都存在一个CMakeLists.txt
	(2)输入命令cmake . (.号代表本目录)
	(3)系统会自动生成CMakeFiles文件夹,CMakeCache.txt 、cmake_install.cmake等文件，并且生成了Makefile.
	(4)在这个目录输入make命令。

2. CMakeLists.txt内容解释:
		project(hello) 
		*// project指令的语法是: project(projectname [CXX] [C] [Java]) 						用来指定工程名称，并可以指定工程支持的语言。
		// 这个指定隐式定义了两个cmake变量<projectname>_BINARY_DIR 和<projectname>_SOURCE_DIR
		// 同时cmake系统也帮助我们预定义了PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，值和上面两个一致。
		set(src_list main.cpp)
		// set指定语法: set(var [value] [cache type docstring [force]])
		// set指定可以用来显式定义变量
		// 例如: set(src_list main.c) ,如果有多个源，也可以set(src_list main.c t1.c t2.c).
		MESSAGE(STATUS "THIS IS BINARY DIR " ${HELLO_BINARY_DIR})
		// message指令用于向终端输出用户定义的信息。包括 错误信息(SEND_ERROR)、输出前缀(STATUS)
		MESSAGE(STATUS "THIS IS SOURCE DIR " ${HELLO_SOURCE_DIR})
		
		// 定义了这个工程会生成一个文件名为hello的可执行文件，相关的源文件是SRC_LIST中定义的源文件列表
		add_executable(hello ${SRC_LIST})
		
3. 基本语法规则:
	(1)变量使用${}方式取值，但是在IF控制语句中直接使用变量名
	(2)指令(参数1 参数2 ...) : 参数使用括弧括起来，参数之间使用空格或分号分开
	(3)
	
4. 内部构建和外部构建:
	内部构建: 代码和构建后生成的文件在同一个目录，影响代码
	外部构建: 代码和生成的文件不在一块
		(1)创建build目录，和代码main.cpp 同级，
		(2)进入build目录，使用 cmake ..   (..代表父目录)，此时生成的文件会在build目录下
		
5. ADD_SUBDIRECTORY(source_dir [binary_dir] [execlude_from_all]):
	这是指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放位置。
	EXECLUDE_FROM_ALL参数含义是将这个目录从比编译工程中排除，比如：工程的example。可以就需要工程构建完成后，再进入example目录单独进行构建。
	
 例如:	ADD_SUBDIRECTORY(src bin)
	 将src子目录将入工程，并制定编译输出路径为bin目录，如果不进行bin目录的指定，那么编译结果将存在build/src目录下(和原有的src目录对应)，指定bin目录后，相当于在编译时将src重命名为bin，所有中间 结果和目标二进制都存放在bin目录下。

