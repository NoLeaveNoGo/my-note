1.Promise是异步编程的解决方法，比传统的回调函数+事件 更合理、强大。ES6原生提供了Promise对象

一:简要介绍:
Promise代表一个异步操作,有三种状态:
    1.pending(进行中)、fulfilled(已成功)、rejected(已失败)
    2.只有 异步操作的结果可以决定是哪一种状态，任何其他操作都无法改变这个状态。
    3.一旦状态改变 ，就不会再变。
        (1)状态改变只有两种可能:
            pending -> fulfilled
            pending -> rejected
        (2)只要这两种情况发生，状态就凝固，不会再改变 ，这时称为resolved(已定型)

二:基本用法
    (1)Promise对象是一个构造函数，用于生成Promise实例
    (2) Promise构造函数接收一个函数作为参数。
        该函数的两个参数分别是resolve和reject。
        它是两个函数，由javascript引擎提供，不用自己部署。
        ```java
            var promise=new Promise(function(resolve,reject){
                // ... some code
                if(/* 异步操作成功 */){
                    resolve(value)
                }else{
                    reject(error)
                }
            };
        ```
        1.resolve函数作用:
            (1)将Promise对象的状态从"未完成"变为"成功"(pending -> resolved)
            (2)在异步操作成功时调用，并将异步操作的结果，作为 参数传递出去
        2.reject函数的作用:
            (1)将Promise对象的状态从"未完成"变为"失败"(pending -> rejected)
            (2)在异步操作失败时调用，并将异步操作报出的错误，作为 参数传递出去
   
    (3)Promise实例生成后，可以用then方法分别指定resolved状态和rejected的回调函数
        ```java
         promise.then(function(value){
            //success
         },function(error){
            //failure
         });
        ```
        1.第一个回调函数是Promise对象的状态变为resolved时调用
        2.第二个回调函数是Promise对象状态变为rejected时调用
       
Example:
    ```java
        function timeout(ms){
            return new Promise((resolve,reject)=>{
                setTimeout(resolve,ms,'done');
            }
        }
    ```
        
        