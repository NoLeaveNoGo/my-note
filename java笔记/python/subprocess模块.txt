subprocess.call()方法:
	父进程等待子进程完成.返回退出信息(returncode,相当于Linux exit code)

subprocess.check_call():
	父进程等待子进程完成。如果returncode不为0，则抛出CallProcessError异常。
	
subprocess.check_output():
	父进程等待子进程完成。返回子进程向标准输出

这三个函数使用方法类似。
例:
import subprocess
# 和shell中命令ls -l显示结果一样。
retcode=subprocess.call(['ls','-l'])
print(retcode)

函数参数:
	shell=True 
	unix下相当于args前面添加了"/bin/sh" "-c"
	windowx下，相当于添加了"cmd.exe /c "


child=subprocess.Popen():上面的几个函数都是基于Popen()的封装。
Popen方法，主程序不会等待子进程完成，必须调用对象的wait()方法，父进程才会等待.

b)添加子进程等待。
child=subprocess.Popen(['ls','-l'])
child.wait()
print('Hello')

c)父进程对子进程的其他操作：
	child.poll() #检查子进程状态
	child.kill() #终止子进程
	child.send_signal() #向子进程发送信号
	child.terminate() #终止子进程
	
d)子进程文本控制
子进程的标准输入、标准输出、标准错误如下属性分别表示:
child.stdin|child.stdout|child.stderr


我们还可以在Popen()建立子进程的时候改变标准输入、标准输出和标准错误，
并可以利用subprocess.PIPE将多个子进程的输入和输出连接在一起，构成管道(pipe)，如下2个
	
例1 
#！/usr/bin/env python

import subprocess
#将标准输出定向输出到subprocess.PIPE
child = subprocess.Popen(['ls','-l'],stdout=subprocess.PIPE)
print (child.stdout.read())   #使用 child.communicate()  也可
-----------------------------------------
例2
#!/usr/bin/env python
import subprocess

child1 = subprocess.Popen(['cat','/etc/passwd'],stdout=subprocess.PIPE)
child2 = subprocess.Popen(['grep','root'],stdin=child1.stdout,stdout=subprocess.PIPE)

print child2.communicate()
-----------------------------------
subprocess.PIPE实际上为文本流提供一个缓存区。
child1的stdout将文本输出到缓存区，随后child2的stdin从该PIPE中将文本读取走。
child2的输出文本也被存放在PIPE中，直到communicate()方法从PIPE中读取出PIPE中的文本。
注意：communicate()是Popen对象的一个方法，该方法会阻塞父进程，直到子进程完成

