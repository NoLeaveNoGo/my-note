os.path模块：
	os.path.splitext('adsad.jpg'):获得文件扩展名函数:返回扩展名和扩展之前的文件名路径.('adsad','.jpg')
	
	os.path.isdir(name):判断name是不是一个目录，name不是目录就返回false：
		1.name可以是绝对路径，也可以是相对路径(相对于python的当前工作目录).
		2.name可以不存在，会返回Flase
	
	os.path.isfile(name):判断name是不是一个文件，不存在name也返回false
	
	os.path.exists(name):判断是否存在文件或目录name
	
	os.path.getsize(name):获得文件或文件夹大小。如果不存在则抛出异常:FileNotFoundError
	
	os.path.abspath(name):获得绝对路径
	
	os.path.normpath(path):规范path字符串形式
	os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）
	
	os.path.join(path,name):连接目录与文件名或目录
	
	os.path.basename(path):返回文件名
	
	os.path.dirname(path):返回文件路径

os模块：
	os.listdir(dirname):列出dirname下的目录和文件：
		filename=os.listdir('C:/Users')：返回['All Users', 'Default', 'Default User', 'defaultuser0', 'desktop.ini', 'LiuYuefei', 'Public']
		
	os.getcwd()：获得当前工作目录：filename = os.getcwd() -->'C:\Users\LiuYuefei\workspace2018\file\src':返回的是绝对路径
	
	os.chdir(dirname):改变工作目录到dirname
	
	os.rename(old, new):重命名：可以用于移动文件：old和new都是相对路径
	
	os.remove(file)：删除：
	
	os.makedirs(r"c:\python\test"):创建多级目录
	
	os.mkdir("test"):创建单个目录
	
	os.rmdir("test"):删除单个目录
	
	os.path.getsize(filename)：获取文件大小：
	
time模块：
	time.time():获取当前时间戳:浮点型
	time.localtime() 当前时间的struct_time形式
	time.ctime() 当前时间的字符串形式
	
	格式化字符串：
		 time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())：

datetime模块：
	1.获取当前时间:
		from datetime import datetime
		now=datetime.now()
		print(now)
	2.datetime->timestamp:
		from  datetime import datetime
		dt=datetime(2015,4,19,12,20)
		timestamp=dt.timestamp() #把datetime转化为timestemp
		print(timestamp)  #浮点数，单位是秒
	3.timestamp ->datetime
		from datetime import datetime
		timestamp=1503403169.629649
		print(datetime.fromtimestamp(timestamp))
	4.str->datetime
		from datetime import datetime
		cday=datetime.strptime('2017-8-22 20:06:59','%Y-%m-%d %H:%M:%S')
	5.datetime->str-
		from datetime import datetime
		str_date=datetime.strftime(datetime.now(),'%Y-%m-%d %H:%M:%S')

re模块(正则表达式):
	一、是否匹配的问题
	re.match(r'\d{3}\-\d{3,8}','010-12313')
		1.从字符串的开头进行匹配， 匹配成功就返回一个Match对象，匹配失败就返回None
		2.如果匹配成功，返回一个Match对象，不匹配返回None
	
	re.search(r'-\d+','010-13213')
		1.浏览整个字符串去匹配第一个，未匹配成功返回None,匹配返回Match对象
	
	re.findall(pattern,string,flags=0)
		1.如果想要匹配到字符串中所有符合条件的元素，则需要使用 findall。
		2.返回的list集合
		3.如果没有分组，list中元素为group(0),如果有，则返回下面的group
	Example:
		str_value = "textasdascharset=utf-8;;;charset=utf-8;;charset=utf-8"
		match_val = re.findall(r'charset=([a-zA-Z0-9]+)[\-]([0-9]+)', str_value)
		for match in match_val:
			print("%s:%s" % (type(match), match))
	Result:
		<class 'tuple'>:('utf', '8')
		<class 'tuple'>:('utf', '8')
		<class 'tuple'>:('utf', '8')
	
	二、切分字符串
	re.split(r'\s+','a b   c')
	>>['a','b','c']


文件读写：
	1.读文件：
		f=open('C:/Users/LiuYuefei/a.txt','r')  ->如果不存在抛出IOError
		
		1.2.f.read():一次性读取文件的全部内容
		
		1.3.f.close():关闭
		
		1.4. with open('C:/Users/LiuYuefei/a.txt','r') as f:
			print(f.read())
			----->会自动的帮我们调用close方法
		
		1.5.读取二进制文件:rb模式打开
			with open('C:/Users/LiuYuefei/a.jpg','rb') as f:
			
		1.6.字符编码：
			1.如果读取非UTF-8编码的文本文件时需要传入encoding参数.
			2.如果文件编码不规范，还可以传入errors='ignore'.
	
	2.写文件
	
	
urlib.request模块:

	request.urlopen(url):
	with request.urlopen(url) as f:
		data=f.read()
		print('Status:',f.status,f,reason) #输入响应状态码和原因：>> 'Status:200 OK'
		for k,v in f.getheaders():
			print('%s:%s'%(k,v))  #输入响应头 使用f.getheader('Content-Type')可以获得指定响应头的值
		print('Data:',data.decode('utf-8')) 

模拟浏览器发送GET请求：
		
	
	
	
		
		
	
	
	
	