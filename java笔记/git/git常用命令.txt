1.git init:瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。

2.把文件添加到版本库：git add readme.txt(readme.txt该文件)/git add .(当前目录)
3.把文件提交到仓库：git commit -m "提交信息"
--------------------------------------------------
***git中文件只有的三种状态：
		已修改(modified):修改了文件，但没有保存到数据库中 【文件被修改】
		已暂存(staged):已经对修改文件的当前版本最了标记，使之包含在下次提交的快照中。 【git add .就会将文件暂存】
		已提交(committed):数据已经安全保存在本地数据库中 【git commit 将文件保存到本地数据库】
-------------------------------------------------------

二：从远程库中克隆项目:
	git.exe clone --progress -v "http://gitzx.itbo.cc:33516/zxlab/admin.git" "C:\programmer\git\repository\admin"
	git clone git@github.com:michaelliao/gitskills.git
克隆远程项目的特定分支：
	git.exe clone --progress -v "http://gitzx.itbo.cc:33516/zxlab/admin.git" -b <分支名称>
	使用ssh链接无法访问，不知道什么原因，之后在做深入研究
-------------------------------------------------
三：分支问题
	1.创建dev分支，然后切换到dev分支：
		git checkout -b dev
	2.git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
		git branch dev ----创建新分支dev
		git checkout dev ----切换到分支dev
	3.用git branch命令查看当前分支
		git branch


	4.合并分支，对于提交到远程服务器的master上很有作用(建议都在dev分支上工作，然后合并到master分支上)
		---dev分支和master分支，想把dev分支合并到master分支上
		1.切换到mater分支
		2.git merge dev(使用的是fast-forward方式，类似于指针移动的方式，速度很快)
		3.合并完成后，就可以删除分支了，使用 git branch -d dev方式
	
	 高级合并:
		1. 忽略空白:(减少不必要的冲突)
			git merge 添加 -Xignore-space-change 选项来忽略空白改动。
		
		2. 文件合并冲突解决:
			(1) git merge 后,产生的冲突文件。使用 自己的 或者使用 别人的。
				  git checkout 文件名 --ours 表示冲突的地方采用我们自己的修改,丢弃别人的。
				  git checkout 文件名 --theirs 表示冲突的地方采用别人的。丢弃自己的
		
		3. 在文件合并前运行另外程序。例如 dos2unix程序。 dev分支上 merge master
			(1)首先我们进入到合并冲突状态。 
				当前版本文件(dev分支) stage 2
				他们的版本文件(master分支) stage 3
				共同的版本文件(分支叉开时的位置)的拷贝 stage 1
				
			(2)
			
	5.分支管理策略（不使用fast-forward模式）
		合并分支：git merge --no-ff -m "merge with no-ff" dev

	6.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
       当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
	7.删除分支
		(1)如果是要删除本地已经合并了的分支，则执行：git branch –d 分支名
		(2)为了删除本地未合并的分支:git branch –D 分支名
        
    8.删除远程分支
        (1)git branch -r -d origin/dev-1 (删除远程分支dev-1)
            注:这只是删除本地的索引，而不是真正删除远程分支的内容,要想真正删除远程分支上的内容，用命令(2)
        (2) git push origin :dev-1
            注:冒号前的空格不能少，相当于将空分支push到远程dev-1上，相当于删除远程的dev-1分支

------------------------------------------------
打标签：
   (1)列出已有的标签：git tag
   (2)搜索标签 : git tag -l 'v1.4.2.*'
   (3)新建标签:
      3.1 含附注的标签(用 -a 指定标签名,-m 指定标签说明)
        git tag -a v1.4  -m 'my version 1.4'
      3.2  git show v1.4 (查看相应标签的版本信息)
    (4) 1.分享标签(推送到远程):git push origin  [tagname]
        2.一次推送所有标签: git push origin --tags

-------------------------------------------------
四：
	1.推送到远程服务器
		git push origin master：origin本地仓库的分支，master远程仓库的分支名
	2.从服务器取回更新
		git pull origin master:解释同上
	注:
	1.origin 是默认的远程版本库名称
	2.你可以在 .git/config 之中进行修改
	3.事实上 git push origin master 的意思是 git push origin master:master （将本地的master(冒号前的那个master) 分支推送至远端的 master(冒号后的master) 分支，如果没有就新建一个）

	注：如果本地仓库直接删除了文件，而服务器和本地仓库之前是同步的，需要用“恢复版本”找回之前的文件
五：恢复版本
	git reset --hard HEAD               恢复到最近提交的版本
	git reset --hard HEAD^				 恢复到最近提交的上一个
	git reset --hard HEAD^^				 恢复到最近提交的上上一个
	git reset –hard aabbc               恢复到指定版本(上述git lg 列出的版本)
	
	git reflog  查看之前操作的命令
六:恢复工作区/工作区文件(git checkout),和更换分支是一个命令
	其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
	恢复所有：git checkout *
	恢复指定文件：git checkout README.txt

七:合并分支与解决冲突
	本地库的版本和服务器版本很有可能不一致，这时候无论是将服务器的代码pull还是本地push都会出现问题。
	解决办法：
		(1)先将服务器的代码pull到本地一个新的分支上
		(2)将本地的分支与服务器的分支做合并(	合并分支：git merge --no-ff -m "merge with no-ff" dev)
		(3)解决本地与服务器分支的冲突问题，最后提交代码

八: git变基操作
	变基：当前分支在dev上,使用命令git rebase master 
		1. 它的原理是首先找到这两个分支(dev和master)的最近共同祖先，然后对比当前分支(dev)相对祖先分支的历史提交
		2. 然后将相应的修改存为临时文件，然后将当前分支指向目标基底(master 的最近一次提交)
		3. 最后以此将之前另存为临时文件的修改依序应用
	变基时产生冲突：
		1. 使用git rebase --abort：放弃变基，当前内容还是之前dev的内容。
		2. 使用git rebase --skip: 放弃合并，当前内容是已经变基后的master内容
		
	注意:
		1. 永远不要rebase一个已经分享的分支（到非remote分支，比如rebase到master,develop,release分支上）
		2. 也就是说永远不要rebase一个已经在中央库中存在的分支.只能rebase你自己使用的私有分支
		3. 不要对在你有仓库外有副本的分支执行变基
			* 变基操作的实质是丢弃一些现有的提交,然后相应地新建一些内容一样 但实际不同的提交。
			* 如果你已经将提交推送至某个仓库,而其他人已经从该仓库拉取提交并进行了后续工作。
				此时,如果你用git rebase命令重新亨利了提交并再次推送,你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合
				如果接下来你还要拉取并整合他们修改过的提交,



九: git储藏: git stash 
	1. "储藏"可以获取你工作目录的中间状态--也就是你修改过的被追踪文件和暂存的变更
		并将它保存到一个未完结变更的堆栈中，随时可以重新应用。
	2. 	git stash push -m "添加储藏的注释消息"
	3.  git stash list :显示储藏列表
	4.  git stash apply : 重新应用你刚刚实时的储藏。如果需要应该更早的储藏，需要指定名称
			git stash apply stash@{2}
	
十: git clean 
		* git clean命令用来从你的工作目录中删除所有没有被tracked过的文件
		* git clean 经常和git reset --hard一起结合使用。
		* reset只影响被track过 的文件，所以需要clean来删除没有被track过的文件
		* 使用这两个命令可以让工作目录完全回到一个指定的commit的状态
	git clean -n : 是一次clean演习，告诉你哪些文件会被删除，不会真正删除文件
	git clean -f :删除当前目录没有被track过的文件，不会删除.gitignore文件里面指定的文件夹和文件
	git clean -f <path> ： 删除指定路径下没有被track过的文件
	git clean -df :删除当前目录没有被track过的文件和文件夹
	
	git clean -xf: 删除当前目录所有没有被track过的文件，包括.gitignore中指定文件和文件夹
	
	
		

git的撤销操作
	1.撤销提交操作(追加提交):【修改"已提交"】
		(1).如果commit后发现还有文件没有添加，或者写错了提交信息，可以再次使用git commit --amend 追加操作,最终之后产生一份提交
		例子：
			$ git commit -m "initial commit"
			$ git add forgoten_file
			$ git commit --amend
	2.取消暂存的文件(已暂存->到上次已修改):【修改"已暂存"】如果修改了两个文件，并且想要将他们作为两次独立的修改提交，但却输入了 git add *将两个文件同时暂存起来了，可使用 git reset HEAD <file>命令
		$ git add *
		$ git reset HEAD configure.md   (这时候configure.md文件会被移除暂存区)
	3.撤销对文件的修改(已修改状态的文件恢复到上次已暂存状态,危险命令[对文件的修改将消失，无法找回]):git checkout -- [file]

远程仓库的使用
	1.
	
git别名：查看历史记录
	$　git config --global alias.lg  'log --online --decorate --graph --all'

分支管理
	1. git branch :查看所有分支
	   git branch --merged:查看哪些分支已经合并到当前分支
	   git branch -d testing：删除已经被合并的分支
	   git branch -D testing :强制删除分支
	2.远程分支
		[1]git fetch origin :抓取远程分支
			(1)远程所有的分支都会被抓取.
			(2)远程分支的名字为:origin/master或其他分支名[/前是远程地址的别名,master为远程分支名])
			(3)但不会自动合并到本地分支。
		[2]git merge origin/master:合并远程的master分支到当前的分支上。
		[3]跟踪分支:
			(1)从一个远程跟踪分支检出一个本地分支会自动创建一个叫做"跟踪分支"(有时也叫做"上游分支")。
			(2)跟踪分支是远程分支有直接关系的本地分支。
			(3)如果在跟踪分支上输入git pull ，git能自动识别去哪个服务器上抓取，合并到哪个分支。
			git checkout -b [local branch name] [remotename]/[remote server branch name]
				这时候，本地分支就会和远程分支同步
			(4)删除远程分支
				$ git push origin --delete dev
	    [4]变基
			
------------------------------------------------------------------		

git reflog 命令分析你所有分支的头指针的日志来查找出你在重写历史上可能丢失的提交。

git reflog : git 操作命令的历史 记录 ：
    (1)被回退到了"之前的版本"，现在又需要到"之前版本"的后面去，就需要"将来版本"的hash值
        可以通过git reflog命名找到每一个git 命令的hash值，从而回到"将来版本"
		
-----------------------------------------------------------------------------------------------------

核武器级选项：filter-branch
	有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它 - 例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。
	这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，你不应当使用它。
	然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。

从每一个提交移除一个文件
这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除它。
可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。
为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：

$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
Ref 'refs/heads/master' was rewritten
--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。
在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。如果想要移除所有偶然提交的编辑器备份文件，可以运行类似
如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。

最后将可以看到 Git 重写树与提交然后移动分支指针。 
通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。
为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。
	
-----------------------------------------------------------------------------------------------------
Git如何永久删除文件(包括历史记录):
    https://www.cnblogs.com/shines77/p/3460274.html	
-----------------------------------------------------------------------------------------------------
.gitingnore文件 ：
	.gitignore有两种文件过滤模式，开放模式和保守模式
	1.开放模式是设置哪些文件和文件夹要被过滤，例如：
		target/ 表示过滤这个文件夹
	2.保守模式设置哪些文件不被过滤
		!/src/com
	3.这是他人过滤的文件标准
	```
		# maven ignore
		target/
		# eclipse ignore
		.settings/
		.project
		.classpath
		# idea ignore
		.idea/
		*.ipr
		*.iml
		*.iws
		# temp ignore
		*.log
		*.cache
		*.diff
		*.patch
		*.tmp
		# system ignore
		.DS_Store
		Thumbs.db
		# package ignore (optional)
		# *.jar
		# *.war
		# *.zip
		# *.tar
		# *.tar.gz
	```
	
	4. gitignore修改不起作用：这是因为git存在缓存问题：
		git rm -r --cached .
		git add .
		git  commit -m "update gitignore" 
	 即可	

----------------------------------------------------------------	 
