1.正则表达式：符合一定规则的字符串
	String中的方法：matches(String regex)//判断字符串是否符合正则表达式规则
	规则在java.java.util.regex 的类 Pattern
	A:	字符
		\\	反斜线字符
		\n	新行（换行）符
		\r	回车符
	B:字符类
		[abc]	匹配abc中任意一个
		[^abc]	匹配非abc的一个字符
		[a-zA-Z]a-z或A-Z，两头的字母都包括
		[0-9]	匹配数字
	C:预定义字符类
		.		匹配任意字符
		\d		匹配任意数字  "\\d"="[0-9]"
		\w		单词字符	"\\w"=[a-zA-Z_0-9]
	D:边界匹配器
		^		行的开头
		$		行的结尾
		\b		单词边界(就是不是单词字符的地方)
		举例：hello world？haha；xixi 其中空格、?与;就是不是单词字符
		
	E:数量词
	X？ 	X出现一次或一次也没有
	X{m,n} 	X至少m次，但不超过n次
	X{m,}	至少m次
	X{m}	恰好m次
	
	(2)正则表达式的使用
	匹配功能：
		String中的方法：public boolean matches(String regex)//判断字符串是否符合正则表达式规则
		
	分割功能：String类的：
	//根据给定正则表达式匹配拆分此字符串
	public String[] split(String regex)
	
	例：String ages="18-24";
		String regex="-";
		String[] strArray=ages.split(regex);//通过此后strArray[0]="18";
		
	替换功能

Pattern和Matcher 
	1.单独使用Pattern只能使用Pattern.matcher(String regex,CharSequence input)一种最基础最简单的匹配。
    2.Pattern类用于创建一个正则表达式。也可以说创建一个匹配模式。
    example: 
    ```
        Pattern p=Pattern.complie("\\w+");
        p.pattern(); //返回\w+:返回正则表达式的字符串形式
	```
    
   #1. *** Pattern.split(CharSequence input):用于分割字符串，并返回一个String[]
   example:
   ```
        Pattern p=Pattern.compile("\\d+"); 
        String[] str=p.split("我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com"); 
   ```
   
   #2. *** Pattern.matcher(String regex,CharSequence input):静态方法，用于快速匹配字符串，
   该方法适合用于只匹配一次，且匹配整个字符串。
   Java代码示例: 
        Pattern.matches("\\d+","2223");//返回true         
        Pattern.matches("\\d+","2223aa");//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到  Pattern.matches("\\d+","22bb23");//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到 
   
    #3. *** Pattern.matcher(CharSequence input):
                Pattern.matcher(CharSequence input)返回一个Matcher对象. 
            3.1 Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例. 
            3.2 Matcher类提供了对正则表达式的 分组支持，以及对正则表达式的多次匹配支持。
    example：
    ```
        Pattern p=Pattern.compile("\\d+");
        Matcher m=p.matcher("22bb23");
        m.pattern();//返回p，也就是Matcher是由哪个Pattern对象创建的。
    ```
    
    #4. Matcher类的方法:matches()、lookingAt()、find()均返回boolean类型，
    *** matches()：只有整个字符串匹配才会返回true
    example:
    ```
     Pattern p=Pattern.compile("\\d+");
     Matcher m=p.matcher("22bb23");
     boolean result=m.matches(); //返回 false，因为整个字符串匹配不成功
     result=p.matcher("2233").matches(); //返回true
    ```
        
    *** lookingAt():对前面的字符串进行匹配,只有匹配到的字符串在最前面才返回true 
    ```
        Pattern p=Pattern.compile("\\d+"); 
        Matcher m=p.matcher("22bb23"); 
        m.lookingAt();//返回true,因为\d+匹配到了前面的22 
        Matcher m2=p.matcher("aa2223"); 
        m2.lookingAt();//返回false,因为\d+不能匹配前面的aa 
    ```
    
    *** find():对字符串进行匹配,匹配到的字符串可以在任何位置. 
    ```
        Pattern p=Pattern.compile("\\d+"); 
        Matcher m=p.matcher("22bb23"); 
        m.find();//返回true 
        Matcher m2=p.matcher("aa2223"); 
        m2.find();//返回true 
        Matcher m3=p.matcher("aa2223bb"); 
        m3.find();//返回true 
        Matcher m4=p.matcher("aabb"); 
        m4.find();//返回false 
    ```
    
    *** start()、end()、group():当使用matches(),lookingAt(),find()执行匹配操作后，就可以利用上面三个方法获取更详细的信息。
    
    start():返回匹配到的子字符串在字符串中的索引位置
    end():返回匹配到的子字符串最后一个字符在字符串中的索引位置
    group():返回匹配到的子字符串
    ```
        Pattern p=Pattern.compile("\\d+"); 
        Matcher m=p.matcher("aaa2223bb"); 
        m.find();//匹配2223 
        m.start();//返回3 
        m.end();//返回7,返回的是2223后的索引号 
        m.group();//返回2223 
    ```
    
    *** 分组操作：
        start(),end(),group()均有一个重载方法它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer类还有一个groupCount()用于返回有多少组. 
    Java代码示例: 
    ```        
        Pattern p=Pattern.compile("([a-z]+)(\\d+)"); 
        Matcher m=p.matcher("aaa2223bb"); 
        m.find();   //匹配aaa2223 
        m.groupCount();   //返回2,因为有2组 
        m.start(1);   //返回0 返回第一组匹配到的子字符串在字符串中的索引号 
        m.start(2);   //返回3 
        m.end(1);   //返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. 
        m.end(2);   //返回7 
        m.group(1);   //返回aaa,返回第一组匹配到的子字符串 
        m.group(2);   //返回2223,返回第二组匹配到的子字符串 
    ```
    
    
    现在我们使用一下稍微高级点的正则匹配操作,例如有一段文本,里面有很多数字,而且这些数字是分开的,我们现在要将文本中所有数字都取出来,利用java的正则操作是那么的简单. 
    Java代码示例: 
    Pattern p=Pattern.compile("\\d+"); 
    Matcher m=p.matcher("我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com"); 
    while(m.find()) { 
         System.out.println(m.group()); 
    } 

    输出: 
    456456 
    0532214 
    123 

    如将以上while()循环替换成 
    while(m.find()) { 
         System.out.println(m.group()); 
         System.out.print("start:"+m.start()); 
         System.out.println(" end:"+m.end()); 
    } 
    则输出: 
    456456 
    start:6 end:12 
    0532214 
    start:19 end:26 
    123 
    start:36 end:39 

    现在大家应该知道,每次执行匹配操作后start(),end(),group()三个方法的值都会改变,改变成匹配到的子字符串的信息,以及它们的重载方法,也会改变成相应的信息. 
    注意:只有当匹配操作成功,才可以使用start(),end(),group()三个方法,否则会抛出java.lang.IllegalStateException,也就是当matches(),lookingAt(),find()其中任意一个方法返回true时,才可以使用.
    
    ```
    ```