线程同步问题：
	1.synchronized(锁对象)：当锁对象为同一个时，同步代码块内的代码只能有一个线程去执行，其余线程处于同步阻塞状态。
	
	
	2.出现线程安全问题的三个条件
		A：是不是多线程环境
		B：存不存在共享数据
		C：共享数据有修改操作
		
	3.线程的几种状态：
		新建：使用Thread创建一个对象时
		就绪：当Thread调用start()方法时，线程处于就绪状态。
		执行：当cpu执行该线程时，该线程处于执行状态。即run()中的代码被执行。
		死亡：线程执行完毕后，等待垃圾回收器回收资源，即run()中的代码被执行完毕后，该线程就处于死亡状态。其中interrupt()方法（线程中断）能够使得线程死亡。
		阻塞：当线程在运行状态时被sleep()或者wait()方法调用时，该线程就处于阻塞状态，等待被唤醒notify()，重新进入就绪状态。
		
		其中，wait()方法和notify()方法属于object类。
		API中的说明：
		void wait() 
          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。 
		void notify() 
          唤醒在此对象监视器上等待的单个线程。 
		void notifyAll() 
          唤醒在此对象监视器上等待的所有线程。 
		 
		|--wait():导致当前线程（Thread.currentThread()方法获得的线程）等待。
			然后在其他线程中调用同一对象的notify()方法才能够唤醒线程，使得该线程重新进入就绪状态。
		
		|--notify():唤醒在此对象监视器上等待的单个线程。 即唤醒之前调用该对象的wait()方法的线程。
		
	例如：有一个学生对象：Student s=new Student()；
	
	在其他多个类中如果使用了该学生对象s作为同步锁，
	即一个类：synchronized(s){//线程执行代码块};
	另一个类：synchronized(s){//线程执行代码块};
	在不同线程中，这两个类中的代码块也只能有一个进入，另外一个线程则进入同步阻塞状态。
	