元注解：定义注解时，会需要一些元注解
	@Target:定义注解应用在什么地方(例如是一个方法或者类) ElementType.Method / ElementType.TYPE
	@Retention: 定义注解在哪一个级别可用，在源代码中(SOURCE)、类文件(CLASS)或者运行时(RUNTIME)
	@Inherited ：允许子类继承父类中的注解
	  * 控制标记在类上的注解能被子类继承。例如：
		```java
			@UseCase(id=2,description="parent")
			public class Super {
			}
			
			public class Suber extends Super {
			}
		```
	  * 标记在方法上的注解，如果子类重写了该方法，注解是不会被继承的。加@Inherited也没用
	  * 如果子类没有重写父类的方法，那么子类对象还是可以获取该注解的
	  
2. 获取注解的注解
 例如：	
	```java
	
		@Target(ElementType.TYPE)
		@Retention(RetentionPolicy.RUNTIME)
		@Documented
		@Inherited
		@SpringBootConfiguration
		@EnableAutoConfiguration
		@ComponentScan(excludeFilters = {
				@Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
				@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
		public @interface SpringBootApplication {
		}
	```
   ```java 
		SpringBootApplication application = ActivemqUseApplication.class.getAnnotation(SpringBootApplication.class);
		 // 获取注解对象的注解类型
		 System.out.println(Arrays.toString(application.annotationType().getAnnotations()));
		 // 而使用下面这种方法获取的是注解对象的代理，所以无法获取到被修饰的信息
		 Annotation[] annotation= application.getClass().getAnnotations(); // 由于application为代理对象，所以getClass()获取不到接口的信息
		  
   ```   